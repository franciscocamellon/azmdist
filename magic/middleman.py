# -*- coding: utf-8 -*-
"""
/***************************************************************************
 azmDist
                                 A QGIS plugin
 This plugin calculates the azimuth and distance between two points or a sequence of points.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-08-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Francisco A Camello N
        email                : franciscocamellon@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import QgsField, QgsFields, QgsVectorFileWriter, QgsFeature, QgsProject, QgsWkbTypes, \
	QgsGeometry, QgsPointXY, QgsCoordinateReferenceSystem, QgsDistanceArea, QgsCoordinateTransform
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import QAction, QFileDialog



class Manager:

	def __init__(self, iface):
		self.iface = iface

	def fileHanddler(self, alayer, alist, filedirectory, name):
		crsSrc = alayer.crs()
		crsDes = QgsCoordinateReferenceSystem(crsSrc.authid())
		fieldz = QgsFields()
		fieldz.append(QgsField("Id", QVariant.Int))
		fieldz.append(QgsField("RÃ©", QVariant.String))
		fieldz.append(QgsField("Norte", QVariant.Double, "double", 23, 2))
		fieldz.append(QgsField("Este", QVariant.Double, "double", 23, 2))
		fieldz.append(QgsField("Longitude", QVariant.String))
		fieldz.append(QgsField("Latitude", QVariant.String))
		fieldz.append(QgsField("Vante", QVariant.String))
		fieldz.append(QgsField("Azimute", QVariant.String))
		fieldz.append(QgsField("Distancia", QVariant.Double, "double", 23, 2))

		writer = QgsVectorFileWriter(filedirectory+'/'+name, "UTF-8", fieldz, QgsWkbTypes.Point, crsDes,
			driverName="ESRI Shapefile")

		if writer.hasError() != QgsVectorFileWriter.NoError:
			print("Error when creating shapefile:", writer.errorMessage())

		writer.addFeatures(alist)
		del writer
		nwLayer = self.iface.addVectorLayer(filedirectory+'/'+name, "", "ogr")
		if not nwLayer:
			print("Layer failed to load!")
		return

	def featDict(self, layer):
		fDict = {}
		for feature in layer.getFeatures():
			nome = feature[0]
			lyrId = feature.id()
			geom = feature.geometry().asPoint()
			fDict[lyrId] = fDict.setdefault(lyrId, (nome, geom))

		return fDict

	def lyrCombo(self):
		root = QgsProject.instance().layerTreeRoot()
		layers_tree = root.findLayers()
		layer_list = []

		for layer_tree in layers_tree:
			layer = layer_tree.layer()
			layer_list.append(layer.name())

		return layer_list
